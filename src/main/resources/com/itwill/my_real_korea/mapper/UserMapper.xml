<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.my_real_korea.mapper.UserMapper">

	<resultMap id="userResultMap" type="com.itwill.my_real_korea.dto.user.User" autoMapping="true">
		<association property="userAddInfo" column="user_add_info" autoMapping="true"></association>
		<association property="userImg" column="user_img" autoMapping="true"></association>
	</resultMap>
	
	<!-- 1. 회원 가입 -->
	<insert id="create" parameterType="com.itwill.my_real_korea.dto.user.User">
		INSERT into user_info(user_id, password, name, nickname, phone, email, birth, address, gender, point, is_admin, mail_auth, mail_key) 
		VALUES(#{userId},#{password},#{name},#{nickname},#{phone},#{email},#{birth},#{address},#{gender},2000,1,0,#{mailKey})
	</insert>
	<!-- 2. 회원 정보 보기 -->
	<select id="findUser" parameterType="java.lang.String" resultMap="userResultMap">
		SELECT * 
		FROM user_info u 
			LEFT OUTER JOIN user_add_info ua
				ON u.user_id = ua.user_id
			LEFT OUTER JOIN user_img ui
				ON u.user_id = ui.user_id
		WHERE u.user_id = #{userId}
	</select>
	<!-- 3. 전체 회원 정보 보기 -->
	<select id="findUserList" parameterType="java.lang.String" resultMap="userResultMap">
        SELECT *
        FROM user_info u
			JOIN user_add_info ua
				ON u.user_id = ua.user_id
			JOIN user_img ui
				ON u.user_id = ui.user_id
	</select>
	<!-- 4. 회원 정보 수정 -->	
	<update id="update" parameterType="com.itwill.my_real_korea.dto.user.User">
		UPDATE  user_info 
		SET password=  #{password}, nickname = #{nickname}, phone = #{phone}, email = #{email}, address = #{address} , gender = #{gender}, point=#{point} , birth = #{birth}
		WHERE user_id = #{userId}
	</update>
	<!-- 4. 회원 정보 수정 조인 -->	
	<!-- 
<update id="update" parameterType="com.itwill.my_real_korea.dto.user.User">
	UPDATE user_info ui
		LEFT OUTER JOIN user_add_info uai ON ui.user_id = uai.user_id
	SET ui.password = #{password}, ui.nickname = #{nickname}, ui.phone = #{phone}, ui.email = #{email}, ui.address = #{address}, 
		uai.introduce = #{introduce}, uai.alcohol = #{alcohol}, uai.smoking = #{smoking}
	WHERE ui.user_id = #{userId}
</update>
	 -->
	 
	<!-- 4-1. 유저 선택 정보 수정 -->
	<update id="updateUserAddInfo" parameterType="com.itwill.my_real_korea.dto.user.UserAddInfo">
		update user_add_info 
		set introduce=#{introduce},alcohol=#{alcohol},smoking=#{smoking}
		where user_id=#{userId}
	</update>
	
	
	<!-- 5. 회원 탈퇴 -->
	<delete id="remove" parameterType="java.lang.String">
		DELETE user_info 
		WHERE user_id = #{userId}
	</delete>
	
	<!-- 11. 회원 존재 여부 확인 -->
	<select id="isExistUser" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT count(*) 
		FROM user_info 
		WHERE user_id = #{userId}
	</select>
	<!-- 12. 비밀번호 일치 여부 확인 -->
	<select id="isMatchPassword" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT count(*) 
		FROM user_info 
		WHERE user_id = #{userId} AND password = #{password}
	</select>
	<!-- 13. 이메일, 이름으로 아이디 찾기 -->
	<select id="findIdByEmailName" parameterType="java.util.Map" resultType="java.lang.String">
		SELECT SUBSTR(user_id, 1, 4) || LPAD('*', LENGTH(user_id) - 4, '*')
		FROM user_info 
		WHERE email = #{email} AND name = #{name}
	</select>
	<!-- 14. 이메일, 아이디로 회원 존재여부 확인 -->
	<select id="isExistIdMail" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT count(*) 
		FROM user_info 
		WHERE user_id = #{userId} AND email = #{email}
	</select>
	<!-- 15. 비밀번호 재설정 -->
	<update id="updatePassword" parameterType="com.itwill.my_real_korea.dto.user.User">
		UPDATE  user_info 
		SET password = #{password}
		WHERE user_id = #{userId} AND email = #{email}
	</update>
	
	<!-- 21. 메일 인증여부 확인 -->
	<select id="findMailAuth" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT count(*)
		FROM user_info
		WHERE user_id = #{userId} AND mail_auth = 1
	</select>
	<!-- 22. 메일 인증번호 업데이트 -->
	<update id="updateMailKey" parameterType="com.itwill.my_real_korea.dto.user.User">
		UPDATE  user_info 
		SET mail_key = #{mailKey}
		WHERE user_id = #{userId} AND email = #{email}
	</update>
	<!-- 23. 메일 인증여부 업데이트 -->
	<update id="updateMailAuth" parameterType="com.itwill.my_real_korea.dto.user.User">
		UPDATE  user_info 
		SET mail_auth = 1
		WHERE email = #{email} AND mail_key = #{mailKey}
	</update>
		<!-- 24. 포인트 업데이트 -->	
	<update id="updatePoint" parameterType="com.itwill.my_real_korea.dto.user.User">
		UPDATE  user_info 
		SET point=#{point}
		WHERE user_id = #{userId}
	</update>
	
</mapper>